import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupUsers() {
  try {
    console.log('üîç Buscando usu√°rios PERSONAL...');
    
    // Buscar todos os usu√°rios PERSONAL
    const personalUsers = await prisma.user.findMany({
      where: {
        type: 'PERSONAL'
      },
      select: {
        uid: true,
        name: true,
        email: true,
        type: true,
        createdAt: true
      }
    });

    console.log(`üìä Encontrados ${personalUsers.length} usu√°rios PERSONAL:`);
    personalUsers.forEach(user => {
      console.log(`  - ${user.name} (${user.email}) - ${user.createdAt}`);
    });

    // Filtrar usu√°rios que N√ÉO s√£o do Antonio
    const usersToDelete = personalUsers.filter(user => 
      user.email !== 'antonio@gmail.com'
    );

    console.log(`üóëÔ∏è  Usu√°rios que ser√£o deletados (${usersToDelete.length}):`);
    usersToDelete.forEach(user => {
      console.log(`  - ${user.name} (${user.email})`);
    });

    if (usersToDelete.length === 0) {
      console.log('‚úÖ Nenhum usu√°rio para deletar!');
      return;
    }

    // Deletar os usu√°rios
    const deleteResult = await prisma.user.deleteMany({
      where: {
        type: 'PERSONAL',
        email: {
          not: 'antonio@gmail.com'
        }
      }
    });

    console.log(`‚úÖ Deletados ${deleteResult.count} usu√°rios com sucesso!`);

    // Verificar usu√°rios restantes
    const remainingUsers = await prisma.user.findMany({
      where: {
        type: 'PERSONAL'
      },
      select: {
        name: true,
        email: true
      }
    });

    console.log('üìã Usu√°rios PERSONAL restantes:');
    remainingUsers.forEach(user => {
      console.log(`  - ${user.name} (${user.email})`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao limpar usu√°rios:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupUsers(); 