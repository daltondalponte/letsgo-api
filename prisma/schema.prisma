generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id       String     @id @default(uuid())
  name     String
  UserRole UserRole[]

  @@map("role")
}

model UserRole {
  id      String @id @default(uuid())
  useruid String
  roleId  String
  role    Role   @relation(fields: [roleId], references: [id])
  user    User   @relation(fields: [useruid], references: [uid])
}

model RefreshToken {
  id      String @id @default(uuid())
  token   String @default(uuid())
  useruid String @unique
  user    User   @relation(fields: [useruid], references: [uid], onDelete: Cascade)

  @@index([id])
  @@map("refresh_token")
}

model User {
  uid                    String               @id
  email                  String               @unique
  name                   String
  type                   UserType             @default(PERSONAL)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  avatar                 String?
  document               String?
  password               String
  isActive               Boolean
  isOwnerOfEstablishment Boolean?             @default(false)
  resetToken             String?
  stripeAccountId        String?              @unique
  stripeCustomerId       String?              @unique
  deviceToken            String?
  birthDate              DateTime?
  phone                  String?
  Establishment          Establishment[]
  UserRole               UserRole[]
  CupomAudit             CupomAudit[]
  Cupom                  Cupom[]
  EventLogs              EventAudit[]
  Event                  Event[]
  EventApprovals         EventApprovals[]
  ManageEvents           EventsReceptionist[]
  Payment                Payment[]
  RefreshToken           RefreshToken?
  TicketAudit            TicketAudit[]
  TicketTaker            TicketTaker[]
  TicketSale             TicketSale[]

  @@index([uid])
  @@map("users")
}

model Establishment {
  id           String   @id @default(uuid())
  name         String
  address      String?
  userOwnerUid String
  photos       String[]
  coordinates  Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  contactPhone String?
  description  String?
  socialMedia  Json?
  website      String?
  userOwner    User     @relation(fields: [userOwnerUid], references: [uid])
  Event        Event[]
}

model Event {
  id                String               @id @default(uuid())
  description       String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  address           String?
  photos            String[]
  dateTimestamp     DateTime
  establishmentId   String?
  useruid           String?
  coordinates_event Json?
  listNames         String[]
  ticketTakers      String[]
  name              String
  isActive          Boolean              @default(false) @map("is_active")
  endTimestamp      DateTime?
  Cupom             Cupom[]
  EventAudit        EventAudit[]
  establishment     Establishment?       @relation(fields: [establishmentId], references: [id])
  user              User?                @relation(fields: [useruid], references: [uid])
  EventApprovals    EventApprovals?
  ManageEvents      EventsReceptionist[]
  Ticket            Ticket[]

  @@unique([establishmentId, dateTimestamp])
  @@index([id])
  @@map("events")
}

model EventApprovals {
  id        String               @id @default(uuid())
  useruid   String
  status    EventApprovalsStatus @default(PENDING)
  comment   String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  eventId   String               @unique @map("event_id")
  event     Event                @relation(fields: [eventId], references: [id])
  user      User                 @relation(fields: [useruid], references: [uid])

  @@index([id])
  @@map("events_approvals")
}

model EventAudit {
  id               String           @id @default(uuid())
  useruid          String
  modificationType ModificationType
  createdAt        DateTime         @default(now())
  details          Json?
  entityId         String
  updatedAt        DateTime         @updatedAt
  event            Event            @relation(fields: [entityId], references: [id])
  user             User             @relation(fields: [useruid], references: [uid])

  @@index([id])
  @@map("event_audit")
}

model TicketAudit {
  id               String           @id @default(uuid())
  useruid          String
  modificationType ModificationType
  details          Json?
  createdAt        DateTime         @default(now())
  entityId         String
  updatedAt        DateTime         @updatedAt
  ticket           Ticket           @relation(fields: [entityId], references: [id])
  user             User             @relation(fields: [useruid], references: [uid])

  @@index([id])
  @@map("ticket_audit")
}

model CupomAudit {
  id               String           @id @default(uuid())
  useruid          String
  modificationType ModificationType
  details          Json?
  createdAt        DateTime         @default(now())
  entityId         String
  updatedAt        DateTime         @updatedAt
  cupom            Cupom            @relation(fields: [entityId], references: [id])
  user             User             @relation(fields: [useruid], references: [uid])

  @@index([id])
  @@map("cupom_audit")
}

model EventsReceptionist {
  id        String    @id @default(uuid())
  recursos  Recurso[]
  useruid   String
  eventId   String    @map("event_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @map("updated_at")
  event     Event     @relation(fields: [eventId], references: [id])
  user      User      @relation(fields: [useruid], references: [uid])

  @@unique([useruid, eventId])
  @@index([id])
  @@map("events_receptionist")
}

model TicketTaker {
  id                 String   @id @default(uuid())
  userTicketTakerUid String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userOwnerUid       String
  userOwner          User     @relation(fields: [userOwnerUid], references: [uid])

  @@unique([userOwnerUid, userTicketTakerUid])
  @@index([id, userOwnerUid, userTicketTakerUid])
  @@map("ticket_takers")
}

model Ticket {
  id                 String         @id @default(uuid())
  price              Decimal        @db.Decimal(18, 2)
  eventId            String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  quantity_available Int
  description        String
  Payment            Payment[]
  TicketAudit        TicketAudit[]
  TicketCupons       TicketCupons[]
  event              Event          @relation(fields: [eventId], references: [id])
  TicketSale         TicketSale[]

  @@index([id])
  @@map("tickets")
}

model TicketSale {
  id              String            @id @default(uuid())
  ticketId        String
  paymentId       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  useruid         String
  ticket_status   TicketSaleStatus? @default(UNCONFERRED)
  cupomId         String?           @map("cupom_id")
  CuponsAplicados CuponsAplicados[]
  cupom           Cupom?            @relation(fields: [cupomId], references: [id])
  payment         Payment           @relation(fields: [paymentId], references: [id])
  ticket          Ticket            @relation(fields: [ticketId], references: [id])
  user            User              @relation(fields: [useruid], references: [uid])

  @@index([id])
  @@map("tickets_sale")
}

model CuponsAplicados {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map("created_at")
  cupomId      String     @map("cupom_id")
  ticketSaleId String     @map("ticket_sale_id")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  cupom        Cupom      @relation(fields: [cupomId], references: [id])
  ticketSale   TicketSale @relation(fields: [ticketSaleId], references: [id])

  @@unique([ticketSaleId, cupomId])
  @@index([id])
  @@map("cupons_aplicados")
}

model TicketCupons {
  id        String   @id @default(uuid())
  ticketId  String   @map("ticket_id")
  cupomId   String   @map("cupom")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  cupom     Cupom    @relation(fields: [cupomId], references: [id])
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([ticketId, cupomId])
  @@index([id])
  @@map("ticket_cupons")
}

model Cupom {
  id                 String            @id @default(uuid())
  code               String
  quantity_available Int
  descont_percent    Decimal?          @db.Decimal(5, 2)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  expiresAt          DateTime          @map("expires_at")
  eventId            String?           @map("event_id")
  discount_value     Decimal?          @db.Decimal(18, 2)
  useruid            String?           @map("user_uid")
  description        String?
  CupomAudit         CupomAudit[]
  event              Event?            @relation(fields: [eventId], references: [id])
  user               User?             @relation(fields: [useruid], references: [uid])
  CuponsAplicados    CuponsAplicados[]
  TicketCupons       TicketCupons[]
  TicketSale         TicketSale[]

  @@index([id])
  @@map("cupons")
}

model Payment {
  id             String        @id @default(uuid())
  amount         Decimal       @db.Decimal(18, 2)
  status         PaymentStatus
  useruid        String
  ticketId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  payment_method PaymentMethod
  ticket         Ticket        @relation(fields: [ticketId], references: [id])
  user           User          @relation(fields: [useruid], references: [uid])
  TicketSale     TicketSale[]

  @@index([id])
  @@map("payments")
}

enum ModificationType {
  CREATEEVENT
  UPDATEEVENT
  CREATECUPOM
  UPDATECUPOM
  CREATETICKET
  UPDATETICKET
  DETTACHCUPOM
  ATTACHCUPOM
}

enum EventApprovalsStatus {
  PENDING
  APPROVE
  REJECT
}

enum PaymentMethod {
  CREDITCARD
  PIX
  DEBITCARD
}

enum UserType {
  PERSONAL
  PROFESSIONAL_OWNER
  PROFESSIONAL_PROMOTER
  TICKETTAKER
  MASTER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  FAILED
}

enum TicketSaleStatus {
  CONFERRED
  UNCONFERRED
}

enum Recurso {
  CUPOMINSERT
  CUPOMDELETE
  CUPOMUPDATE
  EVENTUPDATE
  TICKETINSERT
  TICKETUPDATE
  TICKETDELETE
  CUPOMATTACH
}
